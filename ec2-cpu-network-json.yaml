AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Lambda function for monitoring CPU and network usage metrics of EC2 instances across multiple regions and sending monthly summaries via SNS.

Parameters:
  ScheduleExpression:
    Description: Cron expression for the schedule
    Type: String
    Default: cron(0 0 1 * ? *)
  ParentAlertStack:
    Description: The name of the parent stack that exports the SNS topic ARN
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Parent Stacks'
        Parameters:
          - ParentAlertStack

Resources:
  ec2cpunetworkfunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 300
      MemorySize: 512
      Code:
        ZipFile: |
          import boto3
          import datetime
          import os
          import json
          
          def lambda_handler(event, context):
              # Initialize STS and SNS clients
              sts_client = boto3.client('sts')
              sns_client = boto3.client('sns')
          
              # Get AWS account ID and region of the Lambda function
              account_id = sts_client.get_caller_identity()["Account"]
              lambda_region = boto3.session.Session().region_name
          
              # Get a list of all regions
              ec2 = boto3.client('ec2', region_name=lambda_region)
              regions = [region['RegionName'] for region in ec2.describe_regions()['Regions']]
          
              # Initialize data structure for JSON message
              report = {
                  "AWS Account ID": account_id,
                  "Lambda Function Region": lambda_region,
                  "Instances": []
              }
          
              # Iterate over all regions and process instances
              for region in regions:
                  ec2_client = boto3.client('ec2', region_name=region)
                  cloudwatch_client = boto3.client('cloudwatch', region_name=region)
          
                  instances = ec2_client.describe_instances()
                  for reservation in instances['Reservations']:
                      for instance in reservation['Instances']:
                          instance_id = instance['InstanceId']
                          instance_name = get_instance_name(instance.get('Tags', []))
                          instance_data = process_instance(instance_id, instance_name, cloudwatch_client)
                          report["Instances"].append(instance_data)
          
              # Convert report to JSON string
              message = json.dumps(report, indent=4)
          
              # Send one notification with all data in JSON format
              sns_client.publish(TopicArn=os.environ['TOPIC_ARN'], Message=message)
          
          def get_instance_name(tags):
              """Extract the instance name from tags. If 'Name' tag is missing, return 'Null'."""
              for tag in tags:
                  if tag['Key'] == 'Name':
                      return tag['Value']
              return "Null"
          
          def process_instance(instance_id, instance_name, cloudwatch_client):
              # Define timestamps for current and previous month
              now = datetime.datetime.now()
              start_current_month = datetime.datetime(now.year, now.month, 1, 0, 0, 0)
              end_current_month = datetime.datetime(now.year, now.month, now.day, 23, 59, 59)
              first_day_prev_month = start_current_month - datetime.timedelta(days=1)
              start_prev_month = datetime.datetime(first_day_prev_month.year, first_day_prev_month.month, 1, 0, 0, 0)
              end_prev_month = datetime.datetime(first_day_prev_month.year, first_day_prev_month.month, first_day_prev_month.day, 23, 59, 59)
          
              # Fetch and calculate metrics
              metrics = {
                  "CPUUtilization": "Average",
                  "NetworkOut": "Sum",
                  "NetworkIn": "Sum",
                  "StatusCheckFailed": "Average"
              }
              metrics_data = {metric: {} for metric in metrics}
              for metric, statistic in metrics.items():
                  current_data = get_metric_statistics(cloudwatch_client, instance_id, start_current_month, end_current_month, metric, statistic)
                  previous_data = get_metric_statistics(cloudwatch_client, instance_id, start_prev_month, end_prev_month, metric, statistic)
                  if statistic == "Average":
                      metrics_data[metric]["Current"] = format(calculate_average(current_data), '.2f')
                      metrics_data[metric]["Previous"] = format(calculate_average(previous_data), '.2f')
                  elif statistic == "Sum":
                      metrics_data[metric]["Current"] = format(sum_datapoints(current_data) / 1073741824, '.3f')  # Convert to GB
                      metrics_data[metric]["Previous"] = format(sum_datapoints(previous_data) / 1073741824, '.3f')  # Convert to GB
          
              # Build the data structure for the instance
              instance_report = {
                  "Region": cloudwatch_client.meta.region_name,
                  "Instance ID": instance_id,
                  "Instance Name": instance_name,
                  "Metrics": metrics_data
              }
              return instance_report
          
          def get_metric_statistics(cloudwatch_client, instance_id, start, end, metric_name, statistic):
              response = cloudwatch_client.get_metric_statistics(
                  Namespace='AWS/EC2',
                  MetricName=metric_name,
                  Dimensions=[
                      {
                          'Name': 'InstanceId',
                          'Value': instance_id
                      },
                  ],
                  StartTime=start,
                  EndTime=end,
                  Period=3600,
                  Statistics=[statistic]
              )
              return response['Datapoints']
          
          def calculate_average(metric_data):
              if not metric_data:
                  return 0
              total = sum(datapoint['Average'] for datapoint in metric_data)
              return total / len(metric_data) if metric_data else 0
          
          def sum_datapoints(metric_data):
              return sum(datapoint['Sum'] for datapoint in metric_data if 'Sum' in datapoint)
      Environment:
        Variables:
          TOPIC_ARN: {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Tags:
        - Key: 'Name'
          Value: !Ref 'AWS::StackName'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - cloudwatch:GetMetricStatistics
                  - ec2:DescribeRegions
                  - sns:Publish
                Resource: '*'
      Tags:
        - Key: 'Name'
          Value: !Ref 'AWS::StackName'

  ec2cpunetworkMonthlyTrigger:
    Type: AWS::Events::Rule
    Properties:
      Name: !Ref 'AWS::StackName'
      ScheduleExpression: !Ref ScheduleExpression
      Targets:
        - Arn: !GetAtt ec2cpunetworkfunction.Arn
          Id: MonthlyLambdaTrigger
      State: ENABLED

  LambdaPermissionForEventsToInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ec2cpunetworkfunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ec2cpunetworkMonthlyTrigger.Arn

Outputs:
  LambdaFunctionARN:
    Description: The ARN of the Lambda function
    Value: !GetAtt ec2cpunetworkfunction.Arn
