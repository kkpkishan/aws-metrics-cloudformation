AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Lambda function for monitoring memory, disk, and connection metrics of RDS instances across regions, and sending monthly summaries via SNS.

Parameters:
  ScheduleExpression:
    Description: Cron expression for the schedule
    Type: String
    Default: cron(0 0 1 * ? *)
  ParentAlertStack:
    Description: The name of the parent stack that exports the SNS topic ARN
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Parent Stacks'
        Parameters:
          - ParentAlertStack

Resources:
  rdsmemorydiskconnectionfunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 900
      MemorySize: 512
      Code:
        ZipFile: |
          import boto3
          import datetime
          import os
          
          def lambda_handler(event, context):
              # Initialize STS and SNS clients
              sts_client = boto3.client('sts')
              sns_client = boto3.client('sns')
          
              # Get AWS account ID and region of the Lambda function
              account_id = sts_client.get_caller_identity()["Account"]
              lambda_region = boto3.session.Session().region_name
          
              # Initialize message
              message = f"AWS Account ID: {account_id}, Lambda Function Region: {lambda_region}\n"
          
              # Get a list of all regions
              ec2 = boto3.client('ec2', region_name=lambda_region)
              regions = [region['RegionName'] for region in ec2.describe_regions()['Regions']]
          
              # Iterate over all regions and process RDS instances
              for region in regions:
                  region_message_added = False
          
                  rds_client = boto3.client('rds', region_name=region)
                  cloudwatch_client = boto3.client('cloudwatch', region_name=region)
          
                  instances = rds_client.describe_db_instances()
                  instance_ids = [instance['DBInstanceIdentifier'] for instance in instances['DBInstances']]
          
                  for instance_id in instance_ids:
                      instance_message = process_instance(instance_id, cloudwatch_client)
          
                      if instance_message:
                          if not region_message_added:
                              message += f"Region: {region}\n"
                              region_message_added = True
                          message += instance_message
          
              # Send one notification with all data
              #sns_client.publish(TopicArn='TOPIC_ARN', Message=message)
              sns_client.publish(TopicArn=os.environ['TOPIC_ARN'], Message=message)
          
          def process_instance(instance_id, cloudwatch_client):
              # Define timestamps for current and previous month
              now = datetime.datetime.now()
              start_current_month = datetime.datetime(now.year, now.month, 1, 0, 0, 0)
              end_current_month = datetime.datetime(now.year, now.month, now.day, 23, 59, 59)
              first_day_prev_month = start_current_month - datetime.timedelta(days=1)
              start_prev_month = datetime.datetime(first_day_prev_month.year, first_day_prev_month.month, 1, 0, 0, 0)
              end_prev_month = datetime.datetime(first_day_prev_month.year, first_day_prev_month.month, first_day_prev_month.day, 23, 59, 59)
          
              # Fetch CPU, storage, IOPS, and database connections metrics
              current_cpu_data = get_metric_statistics(cloudwatch_client, instance_id, start_current_month, end_current_month, 'CPUUtilization', 'AWS/RDS')
              previous_cpu_data = get_metric_statistics(cloudwatch_client, instance_id, start_prev_month, end_prev_month, 'CPUUtilization', 'AWS/RDS')
              current_storage_data = get_metric_statistics(cloudwatch_client, instance_id, start_current_month, end_current_month, 'FreeStorageSpace', 'AWS/RDS')
              previous_storage_data = get_metric_statistics(cloudwatch_client, instance_id, start_prev_month, end_prev_month, 'FreeStorageSpace', 'AWS/RDS')
              current_freeablememory_data = get_metric_statistics(cloudwatch_client, instance_id, start_current_month, end_current_month, 'FreeableMemory', 'AWS/RDS')
              previous_freeablememory_data = get_metric_statistics(cloudwatch_client, instance_id, start_prev_month, end_prev_month, 'FreeableMemory', 'AWS/RDS')    
              current_write_iops = get_metric_statistics(cloudwatch_client, instance_id, start_current_month, end_current_month, 'WriteIOPS', 'AWS/RDS')
              previous_write_iops = get_metric_statistics(cloudwatch_client, instance_id, start_prev_month, end_prev_month, 'WriteIOPS', 'AWS/RDS')
              current_read_iops = get_metric_statistics(cloudwatch_client, instance_id, start_current_month, end_current_month, 'ReadIOPS', 'AWS/RDS')
              previous_read_iops = get_metric_statistics(cloudwatch_client, instance_id, start_prev_month, end_prev_month, 'ReadIOPS', 'AWS/RDS')
              current_db_connections = get_metric_statistics(cloudwatch_client, instance_id, start_current_month, end_current_month, 'DatabaseConnections', 'AWS/RDS')
              previous_db_connections = get_metric_statistics(cloudwatch_client, instance_id, start_prev_month, end_prev_month, 'DatabaseConnections', 'AWS/RDS')
          
              # Calculate averages and convert storage from bytes to GB
              current_avg_cpu = format(calculate_average(current_cpu_data), '.2f') + '%'
              previous_avg_cpu = format(calculate_average(previous_cpu_data), '.2f') + '%'
              current_avg_storage = format(calculate_average(current_storage_data) / (1024 ** 3), '.2f') + ' GB'
              previous_avg_storage = format(calculate_average(previous_storage_data) / (1024 ** 3), '.2f') + ' GB'
              current_avg_freeablememory = format(calculate_average(current_freeablememory_data) / (1024 ** 3), '.2f') + ' GB'
              previous_avg_freeablememory = format(calculate_average(previous_freeablememory_data) / (1024 ** 3), '.2f') + ' GB'    
              current_avg_write_iops = format(calculate_average(current_write_iops), '.2f')
              previous_avg_write_iops = format(calculate_average(previous_write_iops), '.2f')
              current_avg_read_iops = format(calculate_average(current_read_iops), '.2f')
              previous_avg_read_iops = format(calculate_average(previous_read_iops), '.2f')
              current_avg_db_connections = format(calculate_average(current_db_connections), '.2f')
              previous_avg_db_connections = format(calculate_average(previous_db_connections), '.2f')
          
              # Build the message for the instance
              return f"RDS Name: {instance_id}\n" \
                     f"    - Current Month (End: {end_current_month.strftime('%d/%m/%Y')})\n" \
                     f"        CPU Utilization: {current_avg_cpu}, Free Storage Space: {current_avg_storage}, Free Freeable Memory: {current_avg_freeablememory}\n" \
                     f"        Write IOPS: {current_avg_write_iops}, Read IOPS: {current_avg_read_iops}\n" \
                     f"        Database Connections: {current_avg_db_connections}\n" \
                     f"    - Previous Month (End: {end_prev_month.strftime('%d/%m/%Y')})\n" \
                     f"        CPU Utilization: {previous_avg_cpu}, Free Storage Space: {previous_avg_storage}, Free Freeable Memory: {previous_avg_freeablememory}\n" \
                     f"        Write IOPS: {previous_avg_write_iops}, Read IOPS: {previous_avg_read_iops}\n" \
                     f"        Database Connections: {previous_avg_db_connections}\n\n"
          
          def get_metric_statistics(cloudwatch_client, instance_id, start, end, metric_name, namespace):
              return cloudwatch_client.get_metric_statistics(
                  Namespace=namespace,
                  MetricName=metric_name,
                  Dimensions=[
                      {
                          'Name': 'DBInstanceIdentifier',
                          'Value': instance_id
                      },
                  ],
                  StartTime=start,
                  EndTime=end,
                  Period=3600,
                  Statistics=['Average']
              )['Datapoints']
          
          def calculate_average(metric_data):
              if not metric_data:
                  return 0
              total = sum(datapoint['Average'] for datapoint in metric_data)
              average = total / len(metric_data)
              return average
      Environment:
        Variables:
          TOPIC_ARN: {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Tags:
        - Key: 'Name'
          Value: !Ref 'AWS::StackName'

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - cloudwatch:GetMetricStatistics
                  - ec2:DescribeRegions
                  - rds:DescribeDBInstances
                  - sns:Publish
                Resource: '*'
      Tags:
        - Key: 'Name'
          Value: !Ref 'AWS::StackName'

  rdsmemorydiskconnectionMonthlyTrigger:
    Type: AWS::Events::Rule
    Properties:
      Name: !Ref 'AWS::StackName'
      ScheduleExpression: !Ref ScheduleExpression
      Targets:
        - Arn: !GetAtt rdsmemorydiskconnectionfunction.Arn
          Id: MonthlyLambdaTrigger
      State: ENABLED

  LambdaPermissionForEventsToInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref rdsmemorydiskconnectionfunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt rdsmemorydiskconnectionMonthlyTrigger.Arn

Outputs:
  LambdaFunctionARN:
    Description: The ARN of the Lambda function
    Value: !GetAtt rdsmemorydiskconnectionfunction.Arn
